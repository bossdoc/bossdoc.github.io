.. _copilot:

Vessel Copilot
==============

Main Files
----------

The main code files can be found in ``apps/vessel_copilot``. Entry point for the backend should be ``copilot.py``. 
You can test it using ``tests/tests_copilot.py`` by running ``pytest vast/tests/tests_copilot -s``.

Views are defined in ``apps/vessel_copilot/views_copilot.py``. 
Templates are in ``templates/vessel_copilot``.
Urls in ``urls_vessel_copilot.py``

Architecture
------------

Architecturally, we create instance of ``VesselCopilot`` (in ``copilot.py``) for a particular ship. 
This instantiates several bots that are tasked with analysing different aspects of the vessel - specs, dsr, mirror etc. 
Each bot has an analyze function that returns a list of actions (instances of ``action_template.CopilotAction class``). 
These actions have an action_model attribute which is an object of ``models.copilot_actions``. 
The analyze function does not make any changes to the database. 
We'll call VesselCopilot.save_actions to save the actions in the database.

The table ``models.copilot_actions`` stores one action_name per ship (Does not store the whole history). 
So if we have 500 ships and say a total of 50 action_names, we can have max 500X50 entries in this table.
Anytime anayze function is called, it checks the last saved action for this action_name and ship. 
If a saved action is found, the saved action is updated and returned in the list of actions. 
The table ``models.copilot_emails`` maintains a history of email communication about the given action. 
This can be used in certain analysis functions and is also displayed on the UI.

.. warning::
   The analyze function (and subfunctions) always returns an action of the given action_type 
   (unless the action never existed in the db and the problem is still not present). 
   If the action is already present in the database and the problem is now resolved (not present), 
   the analyze function returns the saved action with status marked as resolved and not an empty list.
   We ensure this by always creating an action, regardless of whether the problem exists or not 
   with an empty problem description. Then if the problem is present, we update the problem description.
   Finally we call ``action_template.get_action_basis_saved_action`` which handles whether to 
   update and return the saved action, create a new action or return None if an action does not exist 
   in DB and is no longer needed.

Writing a new action
--------------------

* Write a new ``_analyze_xyz`` function in the respective bot. Add the function in the list in the ``analyze`` function of the bot. 
* Each function MUST always create actions of the required action_names (even if the problem does not exist).
* If the problem does not exist problem_description will be = "". If it exists, problem description will be a non-empty sring.
* Finally, we call ``action_template.get_action_basis_saved_action`` to update the saved action. This function marks the status of the saved action.
* The status is marked as resolved if the problem does not exist, or it checks if email has been sent etc. 
* Set ``ignore_description=True`` if you want to update the saved action regardless of whether the description of new and old action is the same or not.

Example code

.. code-block:: python
	
	def _analyze_missing_attributes(self):
        
            action_list = []
            action_name = "missing_attributes"
            action_model = models.copilot_actions()
            action_model.ship = self.ship
            action_model.action_name = action_name
            action_model.action_category = self.category
            action_model.problem_title = "Missing vessel attributes"
            action_model.problem_description = ""
            action_model.proposed_solution = "Fetch the missing attributes from API from the vessel entry page"
            action_model.action_priority = 1
            action_model.redirect_urls = json.dumps([ ("Ship Modeling Fitter", "/vw/ship_modelling_fitter/") ])
            missing_attributes = []
            
            for attr in self.non_null_attributes:
                print (attr, getattr(self.ship, attr))
                if getattr(self.ship, attr) is None:
                    missing_attributes.append(attr)

            if len(missing_attributes) > 0:
                action_model.problem_description = "Missing attributes: {}".format(", ".join(missing_attributes))

            action_model = action_template.get_action_basis_saved_action(
                self.ship, action_name, 
                action_model, self.saved_actions, 
                self.response_wait_days
            )
            
            if action_model is not None:
                action_list.append( action_template.CopilotAction(action_model) )

            return action_list


.. automodule:: vast.apps.vessel_copilot.copilot
	:members:

.. automodule:: vast.apps.vessel_copilot.action_template
	:members:

.. automodule:: vast.apps.vessel_copilot.auto_solver
	:members: